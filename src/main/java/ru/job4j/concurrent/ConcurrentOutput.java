package ru.job4j.concurrent;

/**
 * Запуск нити. Thread
 *
 * Нить исполнения говорит виртуальной машине, что операторы в этой нити можно выполнить в многозадачном режиме
 * или даже параллельном режиме. Почему так неоднозначно?
 * Потому что управление нитью передается на усмотрение виртуальной машине. А она в свою очередь может посчитать,
 * что каждую нить можно выполнить либо в разных процессах (параллельно), либо в одном процессе (многозадачно).
 *
 * @author Alex_life
 * @version 1.0
 * @since 09.09.2022
 */
public class ConcurrentOutput {
    public static void main(String[] args) {
        /**
         * Конструктор класса java.lang.Thread принимает функциональный интерфейс java.lang.Runnable, который имеет
         * один метод public void run(). Методы определенные в этом методе будут выполняться в многозадачной среде.
         * Метод run() выведет в консоль строку с его именем: метод getName() выводит «системное» имя потока,
         * которое присваивается автоматически.
         * Именно в переопределенном методе run() мы прописываем ту логику, которую наш поток должен выполнить.
         *
         * создаем 7 потоков
         * при запуске мейна убеждаемся что вывод потоков происходит всегда в разной последовательности
         */
        for (int i = 0; i < 7; i++) {
            Thread another = new Thread(
                    () -> System.out.println(Thread.currentThread().getName())
            );
            another.start();

            Thread second = new Thread(
                    () -> System.out.println(Thread.currentThread().getName())
            );
            second.start();
        }
    }
}

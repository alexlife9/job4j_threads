package ru.job4j.thread;

/**
 * Атомарность
 *
 * Чтобы добиться атомарности не атомарных операций, в Java используется механизм синхронизации.
 *
 * Операция инкремента выполняется в критической секции. Метод get по своей природе тоже атомарный.
 * Но такой код использовать нельзя потому что методы get и increase могут быть вызваны параллельно из разных нитей.
 * В этом случае одна нить увеличит счетчик, а вторая эти данные не успеет прочитать.
 * Такая ситуация называется проблемой видимости (visibility).
 *
 * Чтобы обе нити видели изменения друг друга, с общими ресурсами нужно работать только в критической секции.
 *
 * @author Alex_life
 * @version 2.0
 * @since 16.09.2022
 */
public class Count {
    private int value;

    /* чтобы сделать метод атомарным, надо добавить ключевое слово synchronized */
    public synchronized void increment() {
        value++;
    }

    public synchronized int get() {
        return value;
    }
    /* Теперь одновременно с объектом может работать только одна нить.
    Если две нити пробуют выполнить один и тот же синхронизированный метод,
    то одна из нитей переходит в режим блокировки до тех пор пока первая нить не закончить работу с этим методом.
    Синхронизация делает параллельную программу последовательной. */
}

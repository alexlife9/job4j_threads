package ru.job4j.pool;

/**
 * ForkJoinPool
 *
 * Принцип работы
 * В отличие от ранее рассмотренных пулов, которые работают по шаблону Producer-Consumer,
 * ForkJoinPool работает по принципу work-stealing. Если дословно перевести, то получится "кража работы".
 * Действительно, в отличие пулов, которые вы уже знаете, ForkJoinPool не использует блокирующую очередь,
 * которая заставляет некоторые потоки простаивать. Однако, для этого задачи должны быть делимы на подзадачи.
 * Это основной принцип при работе с ForkJoinPool.
 *
 * Алгоритмы, при которых часть действий зависит от другой части действия и могут быть делимы -  рекурсивны.
 * Именно поэтому рекурсивные алгоритмы больше всего подходят при использовании ForkJoinPool.
 * Если внимательно вчитаться в слово ForkJoinPool, то можно увидеть два слова: fork - делиться и join - объединяться.
 * То же самое происходит при рекурсии. Она разветвляется (fork) до тех пор, пока не будет точного решения,
 * не зависящего от следующего решения, а далее происходит обратный ход рекурсии (join),
 * т.е. нам становится известно следующее решение и мы вычисляем текущее.
 *
 * Итак, в основе своей ForkJoinPool – это пул потоков, преимущество которого состоит в том,
 * что он работает на основе принципа WorkStealing, что дословно можно перевести как «кража работы». Когда один из
 * потоков ForkJoinPool заканчивает свою работу, он не идёт пить кофе или чилить в ютубчике, он проявляет
 * «сознательность» и берёт из общей очереди работ новую задачу. Это продолжается до тех пор, пока задачи не кончатся.
 *
 * Ещё одной особенностью ForkJoinPool является то, что в него нельзя подать Callable или Runnable задачу.
 * У него есть своя иерархия задач, наследуемая от абстрактного класса ForkJoinTask.
 * Основные реализации – RecursiveTask и RecursiveAction. У каждого из них есть абстрактный метод compute(),
 * который и надо реализовывать при наследование.
 * RecursiveTask.compute() возвращает некое значение, RecursiveAction.compute() возвращает void.
 * RecursiveTask содержит свои собственные методы для запуска задачи и получения результата – fork() и join().
 *
 * https:\\habr.com/ru/post/565924/
 *
 * @author Alex_life
 * @version 1.0
 * @since 03.10.2022
 */
public class MergeSort {

    /*В качестве примера, реализуем рекурсивную сортировку слиянием (merge sort), которая используется в Java.
    Сортировка является устойчивой, т.е. не изменяет исходный порядок элементов, а возвращает
    новый отсортированный массив, поэтому создаются новые массивы в коде, а не перестановка элементов в текущем.*/
    public static int[] sort(int[] array) {
        return sort(array, 0, array.length - 1);
    }

    private static int[] sort(int[] array, int from, int to) {
        /* если массив из одного элемента, то делить нечего, возвращаем элемент */
        if (from == to) {
            return new int[]{array[from]};
        }
        /* если попали сюда, значит в массиве более одного элемента, поэтому будем искать середину */
        int mid = (from + to) / 2;
        // объединяем отсортированные части
        return merge(
                // сортируем левую часть
                sort(array, from, mid),
                // сортируем правую часть
                sort(array, mid + 1, to)
        );
    }

    /* Метод объединения двух отсортированных массивов */
    public static int[] merge(int[] left, int[] right) {
        int li = 0;
        int ri = 0;
        int resI = 0;
        int[] result = new int[left.length + right.length];
        while (resI != result.length) {
            if (li == left.length) {
                result[resI++] = right[ri++];
            } else if (ri == right.length) {
                result[resI++] = left[li++];
            } else if (left[li] <= right[ri]) {
                result[resI++] = left[li++];
            } else {
                result[resI++] = right[ri++];
            }
        }
        return result;
    }

}
